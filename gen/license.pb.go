// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: proto/license.proto

package licensev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Module int32

const (
	Module_B Module = 0
	Module_C Module = 1
	Module_T Module = 2
)

// Enum value maps for Module.
var (
	Module_name = map[int32]string{
		0: "B",
		1: "C",
		2: "T",
	}
	Module_value = map[string]int32{
		"B": 0,
		"C": 1,
		"T": 2,
	}
)

func (x Module) Enum() *Module {
	p := new(Module)
	*p = x
	return p
}

func (x Module) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Module) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_license_proto_enumTypes[0].Descriptor()
}

func (Module) Type() protoreflect.EnumType {
	return &file_proto_license_proto_enumTypes[0]
}

func (x Module) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Module.Descriptor instead.
func (Module) EnumDescriptor() ([]byte, []int) {
	return file_proto_license_proto_rawDescGZIP(), []int{0}
}

type Problem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Date  int64  `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *Problem) Reset() {
	*x = Problem{}
	mi := &file_proto_license_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem) ProtoMessage() {}

func (x *Problem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_license_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem.ProtoReflect.Descriptor instead.
func (*Problem) Descriptor() ([]byte, []int) {
	return file_proto_license_proto_rawDescGZIP(), []int{0}
}

func (x *Problem) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Problem) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

type WarningNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notice string `protobuf:"bytes,1,opt,name=notice,proto3" json:"notice,omitempty"`
}

func (x *WarningNotice) Reset() {
	*x = WarningNotice{}
	mi := &file_proto_license_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WarningNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarningNotice) ProtoMessage() {}

func (x *WarningNotice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_license_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarningNotice.ProtoReflect.Descriptor instead.
func (*WarningNotice) Descriptor() ([]byte, []int) {
	return file_proto_license_proto_rawDescGZIP(), []int{1}
}

func (x *WarningNotice) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

type CriticalNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notice string `protobuf:"bytes,1,opt,name=notice,proto3" json:"notice,omitempty"`
}

func (x *CriticalNotice) Reset() {
	*x = CriticalNotice{}
	mi := &file_proto_license_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CriticalNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriticalNotice) ProtoMessage() {}

func (x *CriticalNotice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_license_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriticalNotice.ProtoReflect.Descriptor instead.
func (*CriticalNotice) Descriptor() ([]byte, []int) {
	return file_proto_license_proto_rawDescGZIP(), []int{2}
}

func (x *CriticalNotice) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

type License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                       string            `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	CreatedAt                 int64             `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                 int64             `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CheckDate                 int64             `protobuf:"varint,4,opt,name=Check_date,json=CheckDate,proto3" json:"Check_date,omitempty"`
	RecheckDate               int64             `protobuf:"varint,5,opt,name=recheck_date,json=recheckDate,proto3" json:"recheck_date,omitempty"`
	Worktime                  int64             `protobuf:"varint,6,opt,name=worktime,proto3" json:"worktime,omitempty"`
	Modules                   []Module          `protobuf:"varint,7,rep,packed,name=modules,proto3,enum=license.Module" json:"modules,omitempty"`
	Version                   string            `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	ReadOnly                  bool              `protobuf:"varint,9,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	RecheckNeeded             bool              `protobuf:"varint,10,opt,name=recheck_needed,json=recheckNeeded,proto3" json:"recheck_needed,omitempty"`
	WarningNotice             []*WarningNotice  `protobuf:"bytes,11,rep,name=warning_notice,json=warningNotice,proto3" json:"warning_notice,omitempty"`
	CriticalNotice            []*CriticalNotice `protobuf:"bytes,12,rep,name=critical_notice,json=criticalNotice,proto3" json:"critical_notice,omitempty"`
	Problems                  []*Problem        `protobuf:"bytes,13,rep,name=problems,proto3" json:"problems,omitempty"`
	MaxBasicConn              int32             `protobuf:"varint,14,opt,name=max_basic_conn,json=maxBasicConn,proto3" json:"max_basic_conn,omitempty"`
	MaxComplianceConn         int32             `protobuf:"varint,15,opt,name=max_compliance_conn,json=maxComplianceConn,proto3" json:"max_compliance_conn,omitempty"`
	ConnSoftLimit             bool              `protobuf:"varint,16,opt,name=conn_soft_limit,json=connSoftLimit,proto3" json:"conn_soft_limit,omitempty"`
	ConnLimitExcess           []int64           `protobuf:"varint,17,rep,packed,name=conn_limit_excess,json=connLimitExcess,proto3" json:"conn_limit_excess,omitempty"`
	ComplianceConnLimitExcess []int64           `protobuf:"varint,18,rep,packed,name=compliance_conn_limit_excess,json=complianceConnLimitExcess,proto3" json:"compliance_conn_limit_excess,omitempty"`
	PublicKey                 string            `protobuf:"bytes,19,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *License) Reset() {
	*x = License{}
	mi := &file_proto_license_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License) ProtoMessage() {}

func (x *License) ProtoReflect() protoreflect.Message {
	mi := &file_proto_license_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License.ProtoReflect.Descriptor instead.
func (*License) Descriptor() ([]byte, []int) {
	return file_proto_license_proto_rawDescGZIP(), []int{3}
}

func (x *License) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *License) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *License) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *License) GetCheckDate() int64 {
	if x != nil {
		return x.CheckDate
	}
	return 0
}

func (x *License) GetRecheckDate() int64 {
	if x != nil {
		return x.RecheckDate
	}
	return 0
}

func (x *License) GetWorktime() int64 {
	if x != nil {
		return x.Worktime
	}
	return 0
}

func (x *License) GetModules() []Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *License) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *License) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *License) GetRecheckNeeded() bool {
	if x != nil {
		return x.RecheckNeeded
	}
	return false
}

func (x *License) GetWarningNotice() []*WarningNotice {
	if x != nil {
		return x.WarningNotice
	}
	return nil
}

func (x *License) GetCriticalNotice() []*CriticalNotice {
	if x != nil {
		return x.CriticalNotice
	}
	return nil
}

func (x *License) GetProblems() []*Problem {
	if x != nil {
		return x.Problems
	}
	return nil
}

func (x *License) GetMaxBasicConn() int32 {
	if x != nil {
		return x.MaxBasicConn
	}
	return 0
}

func (x *License) GetMaxComplianceConn() int32 {
	if x != nil {
		return x.MaxComplianceConn
	}
	return 0
}

func (x *License) GetConnSoftLimit() bool {
	if x != nil {
		return x.ConnSoftLimit
	}
	return false
}

func (x *License) GetConnLimitExcess() []int64 {
	if x != nil {
		return x.ConnLimitExcess
	}
	return nil
}

func (x *License) GetComplianceConnLimitExcess() []int64 {
	if x != nil {
		return x.ComplianceConnLimitExcess
	}
	return nil
}

func (x *License) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

var File_proto_license_proto protoreflect.FileDescriptor

var file_proto_license_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x33,
	0x0a, 0x07, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x22, 0x27, 0x0a, 0x0d, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x22, 0x28, 0x0a, 0x0e,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x22, 0xf9, 0x05, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x68, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0e, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x2e,
	0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x78,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x53, 0x6f, 0x66,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x03, 0x52, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x2a, 0x1d, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x05, 0x0a, 0x01,
	0x42, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x54, 0x10,
	0x02, 0x42, 0x20, 0x5a, 0x1e, 0x73, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x6b, 0x69, 0x65, 0x2e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x3b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_license_proto_rawDescOnce sync.Once
	file_proto_license_proto_rawDescData = file_proto_license_proto_rawDesc
)

func file_proto_license_proto_rawDescGZIP() []byte {
	file_proto_license_proto_rawDescOnce.Do(func() {
		file_proto_license_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_license_proto_rawDescData)
	})
	return file_proto_license_proto_rawDescData
}

var file_proto_license_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_license_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_license_proto_goTypes = []any{
	(Module)(0),            // 0: license.Module
	(*Problem)(nil),        // 1: license.Problem
	(*WarningNotice)(nil),  // 2: license.WarningNotice
	(*CriticalNotice)(nil), // 3: license.CriticalNotice
	(*License)(nil),        // 4: license.License
}
var file_proto_license_proto_depIdxs = []int32{
	0, // 0: license.License.modules:type_name -> license.Module
	2, // 1: license.License.warning_notice:type_name -> license.WarningNotice
	3, // 2: license.License.critical_notice:type_name -> license.CriticalNotice
	1, // 3: license.License.problems:type_name -> license.Problem
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_license_proto_init() }
func file_proto_license_proto_init() {
	if File_proto_license_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_license_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_license_proto_goTypes,
		DependencyIndexes: file_proto_license_proto_depIdxs,
		EnumInfos:         file_proto_license_proto_enumTypes,
		MessageInfos:      file_proto_license_proto_msgTypes,
	}.Build()
	File_proto_license_proto = out.File
	file_proto_license_proto_rawDesc = nil
	file_proto_license_proto_goTypes = nil
	file_proto_license_proto_depIdxs = nil
}
